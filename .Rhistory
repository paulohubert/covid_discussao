)
data(NASDAQ)
install.packages("FRAPO")
library(FRAPO)
data(NASDAQ)
install.packages("FRAPO", dependencies = T)
library(FRAPO)
df = data(NASDAQ)
install.packages("Rglpk")
install.packages("gdata")
df = read.csv('/home/paulo/Documents/aulas/Mackenzie_2019/Material/Aula14/IBOVDIA.XLS')
df = read.csv('/home/paulo/Documents/aulas/Mackenzie_2019/Material/Aula14/BVSP.csv')
View(df)
library(ggplot)
library(ggplot2)
View(df)
g = ggplot(data = df, aes(x = Date, y = Close))
g + geom_line()
df['Date']
df = read.csv('/home/paulo/Documents/aulas/Mackenzie_2019/Material/Aula14/BVSP.csv', stringsAsFactors = F)
summary(df)
View(df)
df['Date'] = as.Date(df['Date'], '%Y-%m-%d')
df$Date = as.Date(df$Date, '%Y-%m-%d')
df$Close = as.numeric((df$Close))
View(df)
g = ggplot(data = df, aes(x = Date, y = Close))
g + geom_line()
df$ret = diff(df$Close)
df$ret = rbind(diff(df$Close), 'NA')
df$ret = rbind(as.matrix(diff(df$Close)), [NA])
df$ret = rbind(as.matrix(diff(df$Close)), NA)
g = ggplot(data = df, aes(x = Date, y = ret))
g + geom_line()
g = ggplot(data = df, aes(x = Date, y = ret))
g + geom_line() + ylab('Diferença 1 dia')
df$ret = rbind(as.matrix(diff(df$Close) / df$Close[-length(df$Close)], NA)
g + geom_line() + ylab('Diferença 1 dia')
df$ret = rbind(as.matrix(diff(df$Close) / df$Close[-length(df$Close)]), NA)
g = ggplot(data = df, aes(x = Date, y = ret))
g + geom_line() + ylab('Diferença 1 dia')
g = ggplot(data = df, aes(x = Date, y = ret))
g + geom_line() + ylab('Retorno')
# Coloque na variavel pasta_dados o endereço da pasta onde está o arquivo de dados
pasta_dados = "/home/paulo/Documents/aulas/FGV/Estat I/Dados/"
# Lendo o arquivo de famílias
dados = read.csv(paste0(pasta_dados, arquivo), header = T)
# COloque nessa variável o nome do arquivo texto COM A EXTENSÃO
arquivo = 'base_amostra_familia_201812.csv'
# Lendo o arquivo de famílias
dados = read.csv(paste0(pasta_dados, arquivo), header = T)
# Coloque na variavel pasta_dados o endereço da pasta onde está o arquivo de dados
pasta_dados = "/home/paulo/Documents/aulas/FGV/Estat I/dados/"
# Coloque na variavel pasta_dados o endereço da pasta onde está o arquivo de dados
# Cuidado! O R diferencia maiúsculas de minúsculas
pasta_dados = "/home/paulo/Documents/aulas/FGV/Estat I/dados/"
# COloque nessa variável o nome do arquivo texto COM A EXTENSÃO
arquivo = 'base_amostra_familia_201812.csv'
# Lendo o arquivo de famílias
dados = read.csv(paste0(pasta_dados, arquivo), header = T)
# Checando o resultado
summary(dados)
# Lendo o arquivo de famílias
dados = read.csv(paste0(pasta_dados, arquivo), header = T, sep = ';')
# Lendo o arquivo de famílias
# header = T - indica que o arquivo tem cabeçalho com nomes de variáveis
# sep = ';' - indica que o separador é o ponto-e-vírgula
# dec = ',' - indica que o separador de decimal é a vírgula
dados = read.csv(paste0(pasta_dados, arquivo), header = T, sep = ';')
remove(dados)
# Lendo o arquivo de famílias
# header = T - indica que o arquivo tem cabeçalho com nomes de variáveis
# sep = ';' - indica que o separador é o ponto-e-vírgula
# dec = ',' - indica que o separador de decimal é a vírgula
dados = read.csv(paste0(pasta_dados, arquivo), header = T, sep = ';')
# Checando o resultado
summary(dados)
# Análise: quilombolas
table(dados$ind_familia_quilombola_fam)
# Análise: quilombolas
table(dados$marc_pbf)
# Renda média por pbf
mean(dados$vlr_renda_media_fam, x = dados$marc_pbf)
# Renda média por pbf
aggregate(dados$vlr_renda_media_fam ~ dados$marc_pbf)
# Renda média por pbf
aggregate(dados$vlr_renda_media_fam ~ dados$marc_pbf, mean)
# Renda média por pbf
aggregate(dados$vlr_renda_media_fam ~ dados$marc_pbf, FUN = mean)
# Mediana
aggregate(dados$vlr_renda_media_fam ~ dados$marc_pbf, FUN = median)
# Mínimo
aggregate(dados$vlr_renda_media_fam ~ dados$marc_pbf, FUN = min)
# Máximo
aggregate(dados$vlr_renda_media_fam ~ dados$marc_pbf, FUN = max)
# Desvio-padrão
aggregate(dados$vlr_renda_media_fam ~ dados$marc_pbf, FUN = sd)
# Boxplot
boxplot(dados$vlr_renda_media_fam ~ dados$marc_pbf)
# Boxplot
boxplot(dados$vlr_renda_media_fam ~ dados$marc_pbf, xlabel= "Bolsa- família (1 = sim)")
# Boxplot
boxplot(dados$vlr_renda_media_fam ~ dados$marc_pbf, xlab = "Bolsa- família (1 = sim)", ylab = "Renda média familiar")
# Boxplot - renda
boxplot(dados$vlr_renda_media_fam, ylab = "Renda média familiar")
boxplot(dados$vlr_renda_media_fam ~ dados$marc_pbf, xlab = "Bolsa- família (1 = sim)", ylab = "Renda média familiar", ylim = c(0, 1500))
# Boxplot - renda com limite
boxplot(dados$vlr_renda_media_fam, ylab = "Renda média familiar", ylim = c(0, 1500))
# Boxplot - renda x grupos especiais
boxplot(dados$vlr_renda_media_fam ~ dados$ind_parc_mds_fam, xlab = "Grupos tradicionais", ylab = "Renda média familiar", names = c("Cigana", "Extrativista", "Pescadores", "Terreiro", "Ribeirinha", "Agricultores familiares", "Assentada", "Crédito fundiário", "Acampada", "Atingida por empreendimento", "Família de preso", "Catadores", "Nenhuma"))
# Boxplot - renda x grupos especiais
boxplot(dados$vlr_renda_media_fam ~ dados$ind_parc_mds_fam, xlab = "Grupos tradicionais", ylab = "Renda média familiar", names = c("Cigana", "Extrativista", "Pescadores", "Terreiro", "Ribeirinha", "Agricultores familiares", "Assentada", "Crédito fundiário", "Acampada", "Atingida por empreendimento", "Família de preso", "Catadores", "Nenhuma"), las = 2)
# Boxplot - renda x grupos especiais
boxplot(dados$vlr_renda_media_fam ~ dados$ind_parc_mds_fam, xlab = "", ylab = "Renda média familiar", names = c("Cigana", "Extrativista", "Pescadores", "Terreiro", "Ribeirinha", "Agricultores familiares", "Assentada", "Crédito fundiário", "Acampada", "Atingida por empreendimento", "Família de preso", "Catadores", "Nenhuma"), las = 2)
# Boxplot - renda x grupos especiais
par(mar=c(7,5,1,1))
boxplot(dados$vlr_renda_media_fam ~ dados$ind_parc_mds_fam, xlab = "", ylab = "Renda média familiar", names = c("Cigana", "Extrativista", "Pescadores", "Terreiro", "Ribeirinha", "Agricultores familiares", "Assentada", "Crédito fundiário", "Acampada", "Atingida por empreendimento", "Família de preso", "Catadores", "Nenhuma"), las = 2)
# Boxplot - renda x grupos especiais
par(mar=c(8,5,1,1))
# Boxplot - renda x grupos especiais
par(mar=c(10,5,1,1))
boxplot(dados$vlr_renda_media_fam ~ dados$ind_parc_mds_fam, xlab = "", ylab = "Renda média familiar", names = c("Cigana", "Extrativista", "Pescadores", "Terreiro", "Ribeirinha", "Agricultores familiares", "Assentada", "Crédito fundiário", "Acampada", "Atingida por empreendimento", "Família de preso", "Catadores", "Nenhuma"), las = 2)
# Boxplot - renda x grupos especiais
par(mar=c(15,5,1,1))
boxplot(dados$vlr_renda_media_fam ~ dados$ind_parc_mds_fam, xlab = "", ylab = "Renda média familiar", names = c("Cigana", "Extrativista", "Pescadores", "Terreiro", "Ribeirinha", "Agricultores familiares", "Assentada", "Crédito fundiário", "Acampada", "Atingida por empreendimento", "Família de preso", "Catadores", "Nenhuma"), las = 2)
# Scatter plot (gráfico de dispersão)
# Qtde de comodos x qtde de pessoas
plot(dados$qtd_comodos_domic_fam ~ dados$qtde_pessoas)
library(nCov2019)
install.packages("nCov2019")
remotes::install_github("GuangchuangYu/nCov2019")
install.packages("remotes")
remotes::install_github("GuangchuangYu/nCov2019")
library(nCov2019)
library(tidyverse)
install.packages("tidyverse")
library(tidyverse)
corona_global = load_nCov2019(lang = 'en') %>% pluck(3) %>% as_tibble()
View(corona_global)
library(nCov2019)
library(tidyverse)
corona_global = load_nCov2019(lang = 'en') %>% pluck(3) %>% as_tibble()
View(corona_global)
corona_global %>% filter(country == 'Brazil')
corona_global %>% filter(country == 'Brazil') %>% select(cum_confirm)
plot(corona_global %>% filter(country == 'Brazil') %>% select(cum_confirm))
plot(corona_global %>% filter(country == 'Brazil')
corona_global %>% filter(country == 'Brazil')
corona_global %>% filter(country == 'Brazil')
View(corona_global %>% filter(country == 'Brazil'))
621/349
library(nCov2019)
library(tidyverse)
corona_global = load_nCov2019(lang = 'en') %>% pluck(3) %>% as_tibble()
summary(corona_global)
corona_global %>%
transform(mindata = min(time))
summary(corona_global)
corona_global %>%
group_by(country) %>%
summarise(mindata = min(time))
corona_global = corona_global %>%
group_by(country) %>%
mutate(mindata = min(time)) %>%
ungroup() %>%
transform(elapsed = time - mindat)
corona_global = corona_global %>%
group_by(country) %>%
mutate(mindata = min(time)) %>%
ungroup() %>%
transform(elapsed = time - mindata)
View(corona_global)
summry(corona_global)
summary(corona_global)
g = ggplot(data = corona_global, aes(x = elapsed, y = cum_confirm))
g + geom_line()
g = ggplot(data = corona_global, aes(x = elapsed, y = cum_confirm), color = country)
g + geom_line()
g = ggplot(data = corona_global, aes(x = elapsed, y = cum_confirm, color = country))
g + geom_line()
g = ggplot(data = corona_global, aes(x = elapsed, y = cum_confirm, colour = country))
g + geom_line()
g = ggplot(data = corona_global, aes(x = elapsed, y = cum_confirm, group = country))
g + geom_line()
# Calculando o tempo desde o primeiro caso
corona_global = corona_global %>%
group_by(country) %>%
mutate(mindata = min(time)) %>%
ungroup() %>%
transform(elapsed = as.numeric(time - mindata, units = 'days'))
g = ggplot(data = corona_global, aes(x = elapsed, y = cum_confirm, group = country))
g + geom_line()
g = ggplot(data = corona_global, aes(x = elapsed, y = cum_confirm, colour = country))
g + geom_line()
g = ggplot(data = corona_global, aes(x = elapsed, y = cum_confirm))
g + geom_line(colour = country)
g = ggplot(data = corona_global, aes(x = 'elapsed', y = 'cum_confirm', color = 'country'))
g + geom_line()
g = ggplot(data = corona_global, aes(x = elapsed, y = cum_confirm, color = country))
g + geom_line()
g = ggplot(data = corona_global, aes(x = elapsed, y = cum_confirm, color = factor(country)))
g + geom_line()
g = ggplot(data = corona_global, aes(x = elapsed, y = cum_confirm, colour = factor(country)))
g + geom_line()
g = ggplot(data = corona_global, aes(x = elapsed, y = cum_confirm))
g + geom_line()
View(corona_global)
g = ggplot(data = corona_global, aes(x = elapsed, y = cum_confirm, color = factor(country)))
g + geom_line()
g = ggplot(data = corona_global)
g + geom_line(aes(x = elapsed, y = cum_confirm, color = factor(country)))
g = ggplot(data = corona_global, aes(x = elapsed, y = cum_confirm, color = factor(country)))
g + geom_line() + theme(legend.position = "none")
g = ggplot(data = corona_global, aes(x = elapsed, y = cum_confirm, color = factor(country)))
g + geom_line() + geom_point() + theme(legend.position = "none")
# Calculando o máximo de casos por país
corona_global %>% group_by(country) %>% mutate(maxcases = max(cum_confirm)) %>% filter(maxcases > 500)
# Calculando o máximo de casos por país
corona_global %>% group_by(country) %>% summarise(maxcases = max(cum_confirm)) %>% filter(maxcases > 500)
# Obtendo os dados históricos por país
corona_global = load_nCov2019(lang = 'en') %>% pluck(3) %>% as_tibble()
# Calculando o tempo desde o primeiro caso
corona_global = corona_global %>%
group_by(country) %>%
mutate(mindata = min(time)) %>%
ungroup() %>%
transform(elapsed = as.numeric(time - mindata, units = 'days'))
# Calculando o máximo de casos por país
corona_global %>% group_by(country) %>% summarise(maxcases = max(cum_confirm)) %>% filter(maxcases > 500)
# Calculando o máximo de casos por país
corona_global %>% group_by(country) %>% summarise(maxcases = max(cum_confirm)) %>% filter(maxcases > 600) %>% pluck(country)
# Calculando o máximo de casos por país
corona_global %>% group_by(country) %>% summarise(maxcases = max(cum_confirm)) %>% filter(maxcases > 600) %>% select(country)
# Calculando o máximo de casos por país
paises = corona_global %>% group_by(country) %>% summarise(maxcases = max(cum_confirm)) %>% filter(maxcases > 600) %>% select(country)
g = ggplot(data = corona_global %>% filter(country %in% paises), aes(x = elapsed, y = cum_confirm, color = factor(country)))
g + geom_line() + geom_point() + theme(legend.position = "none")
corona_global %>% filter(country %in% paises)
as.list(paises)
corona_global %>% filter(country %in% paises$country)
# Gráfico
g = ggplot(data = corona_global %>% filter(country %in% paises$country), aes(x = elapsed, y = cum_confirm, color = factor(country)))
g + geom_line() + geom_point() + theme(legend.position = "none")
# Gráfico
g = ggplot(data = corona_global %>% filter(country %in% paises$country), aes(x = elapsed, y = cum_confirm, color = factor(country)))
g + geom_line() + geom_point() #+ theme(legend.position = "none")
# Gráfico
g = ggplot(data = corona_global %>% filter(country %in% paises$country), aes(x = elapsed, y = log(cum_confirm), color = factor(country)))
g + geom_line() + geom_point() #+ theme(legend.position = "none")
paises = c('Italy', 'Spain', 'United States', 'China', 'Brazil')
# Gráfico
g = ggplot(data = corona_global %>% filter(country %in% paises$country), aes(x = elapsed, y = log(cum_confirm), color = factor(country)))
g + geom_line() + geom_point() #+ theme(legend.position = "none")
# Gráfico
g = ggplot(data = corona_global %>% filter(country %in% paises), aes(x = elapsed, y = log(cum_confirm), color = factor(country)))
g + geom_line() + geom_point() #+ theme(legend.position = "none")
install.packages("remotes")
install.packages("tidyverse")
library(nCov2019)
library(tidyverse)
# Obtendo os dados históricos por país
corona_global = load_nCov2019(lang = 'en') %>% pluck(3) %>% as_tibble()
# Calculando o tempo desde o primeiro caso
corona_global = corona_global %>%
group_by(country) %>%
mutate(mindata = min(time)) %>%
ungroup() %>%
transform(elapsed = as.numeric(time - mindata, units = 'days'))
# Calculando o máximo de casos por país
paises = corona_global %>% group_by(country) %>% summarise(maxcases = max(cum_confirm)) %>% filter(maxcases > 600) %>% select(country)
paises = c('Italy', 'Spain', 'United States', 'China', 'Brazil')
# Gráfico
g = ggplot(data = corona_global %>% filter(country %in% paises), aes(x = elapsed, y = log(cum_confirm), color = factor(country)))
g + geom_line() + geom_point() #+ theme(legend.position = "none")
View(g)
View(corona_global)
corona_global %>% filter(country == 'Brazil
corona_global %>% filter(country == 'Brazil
')
corona_global %>% filter(country == 'Brazil')
corona_global %>% filter(country == 'Brazil')
corona_global %>% filter(country == 'Brazil') %>% View()
2200/1620
# Obtendo os dados históricos por país
corona_global = load_nCov2019(lang = 'en') %>% pluck(3) %>% as_tibble()
# Calculando o tempo desde o primeiro caso
corona_global = corona_global %>%
group_by(country) %>%
mutate(mindata = min(time)) %>%
ungroup() %>%
transform(elapsed = as.numeric(time - mindata, units = 'days'))
# Calculando o máximo de casos por país
paises = corona_global %>% group_by(country) %>% summarise(maxcases = max(cum_confirm)) %>% filter(maxcases > 600) %>% select(country)
paises = c('Italy', 'Spain', 'United States', 'China', 'Brazil')
# Gráfico
g = ggplot(data = corona_global %>% filter(country %in% paises), aes(x = elapsed, y = log(cum_confirm), color = factor(country)))
g + geom_line() + geom_point() #+ theme(legend.position = "none")
corona_global %>% filter(country == 'Brazil') %>% View()
#install.packages("remotes")
#install.packages("tidyverse")
#remotes::install_github("GuangchuangYu/nCov2019")
library(nCov2019)
library(tidyverse)
# Obtendo os dados históricos por país
corona_global = load_nCov2019(lang = 'en') %>% pluck(3) %>% as_tibble()
# Calculando o tempo desde o primeiro caso
corona_global = corona_global %>%
group_by(country) %>%
mutate(mindata = min(time)) %>%
ungroup() %>%
transform(elapsed = as.numeric(time - mindata, units = 'days'))
View(corona_global)
View(corona_global)
write_csv(corona_global, '/home/paulo/Documents/dados/covid/global_25032020.csv')
# Obtendo os dados históricos por país
corona_global = load_nCov2019(lang = 'en') %>% pluck(3) %>% as_tibble()
# Calculando o tempo desde o primeiro caso
corona_global = load_nCov2019(lang = "en") %>%
pluck(3) %>%
as_tibble() %>%
group_by(country) %>%
ungroup() %>%
pad(interval = "day", by = "time", group = "country") %>%
fill(cum_confirm, cum_heal, cum_dead) %>%
mutate(mindata = min(time)) %>%
transform(elapsed = as.numeric(time - mindata, units = "days"))
#install.packages("remotes")
#install.packages("tidyverse")
install.packages("padr")
library(padr)
# Obtendo os dados históricos por país
corona_global = load_nCov2019(lang = 'en') %>% pluck(3) %>% as_tibble()
# Calculando o tempo desde o primeiro caso, preenchendo as datas faltantes
corona_global = load_nCov2019(lang = "en") %>%
pluck(3) %>%
as_tibble() %>%
group_by(country) %>%
ungroup() %>%
pad(interval = "day", by = "time", group = "country") %>%
fill(cum_confirm, cum_heal, cum_dead) %>%
mutate(mindata = min(time)) %>%
transform(elapsed = as.numeric(time - mindata, units = "days"))
# Salva csv
write_csv(corona_global, '/home/paulo/Documents/dados/covid/global_25032020.csv')
View(corona_global)
# Calculando o tempo desde o primeiro caso, preenchendo as datas faltantes
corona_global = load_nCov2019(lang = "en") %>%
pluck(3) %>%
as_tibble() %>%
group_by(country) %>%
mutate(mindata = min(time)) %>%
ungroup() %>%
pad(interval = "day", by = "time", group = "country") %>%
fill(cum_confirm, cum_heal, cum_dead) %>%
transform(elapsed = as.numeric(time - mindata, units = "days"))
View(corona_global)
corona_gloabl %>% filter(country == 'Italy') %>% View()
corona_global %>% filter(country == 'Italy') %>% View()
# Salva csv
write_csv(corona_global, '/home/paulo/Documents/dados/covid/global_25032020.csv')
# Calculando o máximo de casos por país
paises = corona_global %>% group_by(country) %>% summarise(maxcases = max(cum_confirm)) %>% filter(maxcases > 600) %>% select(country)
paises = c('Italy', 'Spain', 'United States', 'China', 'Brazil')
# Gráfico
g = ggplot(data = corona_global %>% filter(country %in% paises), aes(x = elapsed, y = log(cum_confirm), color = factor(country)))
g + geom_line() + geom_point() #+ theme(legend.position = "none")
corona_global %>% filter(country == 'Brazil') %>% View()
#install.packages("remotes")
#install.packages("tidyverse")
#install.packages("padr")
#remotes::install_github("GuangchuangYu/nCov2019")
library(nCov2019)
library(tidyverse)
library(padr)
# Obtendo os dados históricos por país
corona_global = load_nCov2019(lang = 'en') %>% pluck(3) %>% as_tibble()
# Calculando o tempo desde o primeiro caso, preenchendo as datas faltantes
corona_global = load_nCov2019(lang = "en") %>%
pluck(3) %>%
as_tibble() %>%
group_by(country) %>%
mutate(mindata = min(time)) %>%
ungroup() %>%
pad(interval = "day", by = "time", group = "country") %>%
fill(cum_confirm, cum_heal, cum_dead) %>%
transform(elapsed = as.numeric(time - mindata, units = "days"))
# Salva csv
write_csv(corona_global, '/home/paulo/Documents/dados/covid/global_25032020.csv')
# Calculando o máximo de casos por país
paises = corona_global %>% group_by(country) %>% summarise(maxcases = max(cum_confirm)) %>% filter(maxcases > 600) %>% select(country)
paises = c('Italy', 'Spain', 'United States', 'China', 'Brazil')
# Gráfico
g = ggplot(data = corona_global %>% filter(country %in% paises), aes(x = elapsed, y = log(cum_confirm), color = factor(country)))
g + geom_line() + geom_point() #+ theme(legend.position = "none")
corona_global %>% filter(country == 'Brazil') %>% View()
#install.packages("remotes")
#install.packages("tidyverse")
#install.packages("padr")
#remotes::install_github("GuangchuangYu/nCov2019")
library(nCov2019)
library(tidyverse)
library(padr)
library(lubridate)
setwd('/home/paulo/Documents/dados/covid/relatório/')
# Obtendo os dados históricos por país
corona_global = load_nCov2019(lang = "en") %>%
pluck(3) %>%
as_tibble() %>%
mutate(cum_dead = ifelse(country == "Brazil" & time == strptime('2020-03-19', format= '%Y-%m-%d'), 3, cum_dead)) %>%
mutate(cum_dead = ifelse(country == "Brazil" & time == strptime('2020-03-20', format= '%Y-%m-%d'), 7, cum_dead))  %>%
group_by(country) %>%
mutate(mindata = min(time)) %>%
ungroup() %>%
pad(interval = "day", by = "time", group = "country") %>%
fill(cum_confirm, cum_heal, cum_dead) %>%
transform(elapsed = as.numeric(time - mindata, units = "days"))
# Data da primeira morte
first_death = corona_global %>%
filter(cum_dead > 0) %>%
group_by(country) %>%
summarise(firstdeath = min(time) + 3)
corona_global = corona_global %>% left_join(first_death, by = "country")
corona_global %>% filter(country == 'Brazil') %>% View()
paises = c('Italy', 'Spain', 'United States', 'China', 'Brazil')
# Gráfico
g = ggplot(data = corona_global %>% filter(country %in% paises), aes(x = elapsed, y = log(cum_confirm), color = factor(country)))
g + geom_line() + geom_point() +ylab("Log(casos confirmados)") + xlab("Dias desde o primeiro caso") +
guides(col=guide_legend(title="País"))
# Calculando taxa de crescimento
corona_global = corona_global %>% group_by(country) %>% mutate(growth = (cum_confirm - lag(cum_confirm)) / lag(cum_confirm), growthd = ifelse(lag(cum_dead) == 0, NA, (cum_dead - lag(cum_dead))/lag(cum_dead)))
# Gráfico crescimento
data.labels = list(data.frame(pais = 'China', quarentine = 53,
x = 75,
y = 2.5,
label = 'Quarentena começa em Wuhan',
ymax = 100
),
data.frame(pais = 'Brasil', quarentine = 25,
x =20,
y = 1.5,
label = 'Quarentena começa em São Paulo',
ymax = 100
),
data.frame(pais = 'Itália', quarentine = 32,
x =25,
y = .7,
label = 'Quarentena em toda a Itália',
ymax = 2.5
),
data.frame(pais = 'EUA', quarentine = c(54, 62),
x =c(45, 50),
y = c(1.5, 1),
label = c('Trump declara apoio à quarentena de 15 dias', 'Trump manifesta dúvidas sobre a quarentena'),
ymax = 100
),
data.frame(pais = 'Reino Unido', quarentine = 46,
x =35,
y = 1,
label = c('Quarentena começa na Inglaterra'),
ymax = 100
))
paises = c('China', 'Brazil', 'Italy', 'United States', 'United Kingdom')
for(i in 1:length(paises)) {
data.label = data.labels[[i]]
pais = paises[i]
if(i == 4) {
g = ggplot(data = corona_global %>% filter(country == pais & growth < data.label$ymax[1]), aes(x = elapsed, y = growth))
g + geom_line(lty = 'dashed') + geom_point() + xlab("Dias desde o primeiro caso") + ylab("Taxa de crescimento") +
ggtitle(paste0(data.label$pais, '- crescimento diário dos casos confirmados'))+
#geom_hline(yintercept = as.numeric((corona_global %>% filter(country == pais) %>% summarise(mean(growth, na.rm = T)))[2]), lty = 'dashed', color= 'red') +
geom_vline(xintercept = data.label$quarentine[1], color = 'blue', lty = 'dashed')  +
geom_text(data = data.label, aes(x = x[1], y = y[1], label = label[1]), color = 'blue') +
geom_vline(xintercept = data.label$quarentine[2], color = 'blue', lty = 'dashed') +
geom_text(data = data.label, aes(x = x[2], y = y[2], label = label[2]), color = 'blue')
} else {
g = ggplot(data = corona_global %>% filter(country == pais & growth < data.label$ymax[1]), aes(x = elapsed, y = growth))
g + geom_line(lty = 'dashed') + geom_point() + xlab("Dias desde o primeiro caso") + ylab("Taxa de crescimento") +
ggtitle(paste0(data.label$pais, '- crescimento diário dos casos confirmados'))+
#geom_hline(yintercept = as.numeric((corona_global %>% filter(country == pais) %>% summarise(mean(growth, na.rm = T)))[2]), lty = 'dashed', color= 'red') +
geom_vline(xintercept = data.label$quarentine[1], color = 'blue', lty = 'dashed')  +
geom_text(data = data.label, aes(x = x[1], y = y[1], label = label[1]), color = 'blue')
}
ggsave(paste0('confirmed_', pais, '.png'))
if(i == 4) {
g = ggplot(data = corona_global %>% filter(country == pais & time > firstdeath), aes(x = elapsed, y = growthd))
g + geom_line(lty = 'dashed') + geom_point() + xlab("Dias desde o primeiro caso") + ylab("Taxa de crescimento") +
ggtitle(paste0(data.label$pais, '- crescimento das mortes'))+
#geom_hline(yintercept = as.numeric((corona_global %>% filter(country == pais) %>% summarise(mean(growthd, na.rm = T)))[2]), lty = 'dashed', color= 'red') +
geom_vline(xintercept = data.label$quarentine[1], color = 'blue', lty = 'dashed') +
geom_vline(xintercept = data.label$quarentine[2], color = 'blue', lty = 'dashed')
} else {
g = ggplot(data = corona_global %>% filter(country == pais & time > firstdeath), aes(x = elapsed, y = growthd))
g + geom_line(lty = 'dashed') + geom_point() + xlab("Dias desde o primeiro caso") + ylab("Taxa de crescimento") +
ggtitle(paste0(data.label$pais, '- crescimento das mortes')) +
#geom_hline(yintercept = as.numeric((corona_global %>% filter(country == pais) %>% summarise(mean(growthd, na.rm = T)))[2]), lty = 'dashed', color= 'red') +
geom_vline(xintercept = data.label$quarentine[1], color = 'blue', lty = 'dashed')
}
ggsave(paste0('dead_', pais, '.png'))
# Crescimento casos x crescimento mortes
dftemp = corona_global %>% filter(country == pais) %>% ungroup() %>%select(c(elapsed, growth, growthd)) %>%
pivot_longer(-elapsed, names_to = 'type', values_to = 'rate') %>%
mutate(type = recode(type, growth = 'Casos', growthd = 'Mortes'))
g = ggplot(data = dftemp, aes(x = elapsed, y = rate, colour = type))
g + geom_line(lty = 4) +
geom_point() +
geom_line(lty = 2) +
guides(col=guide_legend(title="")) +
xlab("Dias desde o primeiro caso") +
ylab("Taxa de crescimento") +
ggtitle(paste0(data.label$pais, ' - taxa de crescimento diário'))
ggsave(paste0('both_', pais, '.png'))
}
